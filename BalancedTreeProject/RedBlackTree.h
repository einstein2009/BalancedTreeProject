/***********************************************************
*                                                          *
*  Authors:       Rodel Aragon, Colby Abrahamoff,          *
*                 Christsandra Broderick, Chandler Snoddy  *
*                 Nicholas Ackors, Stephen Hall            *
*  Course:        CS322 Data Structure and Algorithms II   *
*  Assignment:    Module 6, Written Assignment             *
*  Program:       2-3-4 Tree and Red-Black Tree       	   *
*  Description:   Creates a 2-3-4 Tree with with random    *
*                 integers, then converts the tree to a    *
*                 red-black tree.                          *
*  Input:         Takes as input 100 random int values     *
*                 generated by the rand() function         *
*  Output:        Several lines displaying the values      *
*                 contained within the 2-3-4 tree and the  *
*                 red-black tree. Output is displayed to   *
*                 discern both trees as a 2-3-4 tree and   *
*                 a red-black tree.                        *
*  Created:       12/1/2017                                *
*                                                          *
***********************************************************/


#include "BinaryNode.h"
using namespace std;
enum Color { RED, BLACK };

template <class ItemType>
class RedBlackTree
{
private:
	Node *root;
	void rotateLeft(Node *&, Node *&);
	void rotateRight(Node *&, Node *&);
	void fixViolation(Node *&, Node *&)

public:
	RedBlackTree() { root = NULL; }
	void insert(const int &n);
	void inorder();
	void levelOrder();
	void Delete(ItemType item);
	void fixAfterDeletion(RedBlackNode* p);
};


//The following might need to be added to the main code since it deals with rotating the nodes left and right.

void RedBlackTree::rotateLeft(Node *&root, Node *pt)
{
	Node *pt_right = pt->right;
	pt->right = pt_right->left;

	if (pt->right != NULL)
		pt->right->parent = pt;
	pt_right->parent = pt->parent;

	if (pt->parent == NULL)
		root = pt_right;
	else
		if (pt == pt->parent->left)
			pt->parent->left = pt_right;

		else
			pt - parent->right = pt_right;

	pt_right->left = pt;
	pt->parent = pt_right;
}

void RedBlackTree::rotateRight(Node *&root, Node *&pt)
{
	Node *pt_left = pt->left;

	pt->left = pt_left->right;

	if (pt->left != NULL)
		pt->left->parent = pt;

	pt_left->parent = pt->parent;

	if (pt->parent == NULL)
		root = pt_left;

	else 
		if (pt == pt->parent->left)
			pt->parent->left = pt_left;

	else
		pt->parent->right = pt_left;

	pt_left->right = pt;
	pt->parent = pt_left;
}
