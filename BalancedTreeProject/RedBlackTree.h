/***********************************************************
*                                                          *
*  Authors:       Rodel Aragon, Colby Abrahamoff,          *
*                 Christsandra Broderick, Chandler Snoddy  *
*                 Nicholas Ackors, Stephen Hall            *
*  Course:        CS322 Data Structure and Algorithms II   *
*  Assignment:    Module 6, Written Assignment             *
*  Program:       2-3-4 Tree and Red-Black Tree       	   *
*  Description:   Creates a 2-3-4 Tree with with random    *
*                 integers, then converts the tree to a    *
*                 red-black tree.                          *
*  Input:         Takes as input 100 random int values     *
*                 generated by the rand() function         *
*  Output:        Several lines displaying the values      *
*                 contained within the 2-3-4 tree and the  *
*                 red-black tree. Output is displayed to   *
*                 discern both trees as a 2-3-4 tree and   *
*                 a red-black tree.                        *
*  Created:       12/1/2017                                *
*                                                          *
***********************************************************/


#include "RedBlackNode.h"
using namespace std;
enum Color { RED, BLACK };

template <class ItemType>
class RedBlackTree
{
private:
	BinaryNode<ItemType> *root;
	void rotateLeft(BinaryNode<ItemType> *root, BinaryNode<ItemType> *point);
	void rotateRight(BinaryNode<ItemType> *root, BinaryNode<ItemType> *point);
	void fixViolations(BinaryNode<ItemType> *root, BinaryNode<ItemType> *point);

public:
	RedBlackTree() { root = NULL; }
	void insert(const int &n);
	void inorder();
	void levelOrder();
	void remove(ItemType item);
	void fixAfterDelete(ItemType item);
	void fixViolations(BinaryNode<ItemType> *&root, BinaryNode<ItemType> *&point);
	void display(RedBlackNode<ItemType> *root);
};
#include "RedBlackTree.cpp"